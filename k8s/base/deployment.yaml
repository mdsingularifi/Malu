apiVersion: apps/v1
kind: Deployment
metadata:
  name: secret-storage-service
  labels:
    app: secret-storage-service
    app.kubernetes.io/name: secret-storage-service
    app.kubernetes.io/part-of: malu
spec:
  replicas: 2
  selector:
    matchLabels:
      app: secret-storage-service
  template:
    metadata:
      labels:
        app: secret-storage-service
        version: v1  # Add version label for Istio traffic splitting
        service.istio.io/canonical-name: secret-storage-service  # For telemetry aggregation
        service.istio.io/canonical-revision: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "3000"
        sidecar.istio.io/inject: "true"  # Explicitly enable Istio sidecar injection
        sidecar.istio.io/rewriteAppHTTPProbers: "true"  # Let Istio proxy handle health checks
    spec:
      volumes:
      - name: api-tokens
        secret:
          secretName: api-tokens
          items:
          - key: api-token
            path: api-token
            mode: 0400
      - name: temporary-storage
        emptyDir: 
          medium: Memory   # In-memory storage for sensitive data processing
          sizeLimit: 50Mi # Limit the size
      # Secret rotation using Kubernetes projected volumes
      - name: redis-credentials
        projected:
          sources:
          - secret:
              name: redis-credentials
              # Auto-refreshes when the secret is updated by external secret manager
              optional: false
      # TLS certificates managed by cert-manager
      - name: service-certs
        secret:
          secretName: secret-service-tls
          defaultMode: 0440
      
      initContainers:
      # Security checks and initialization
      - name: security-init
        image: ${IMAGE_REPOSITORY}/security-scanner:latest
        imagePullPolicy: Always
        command: ["sh", "-c", "scan-vulnerabilities /app && setup-permissions /app/data"]
        volumeMounts:
        - name: temporary-storage
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: secret-storage-service
        image: ${IMAGE_REPOSITORY}/secret-storage-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info,tower_http=debug"
        - name: REQUEST_TIMEOUT_SECS
          value: "30"
        - name: REQUEST_BODY_LIMIT_BYTES
          value: "10485760"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        # Enhanced authentication settings
        - name: AUTH_REQUIRED
          value: "true"
        - name: AUTH_MODE
          value: "jwt,mtls"
        # Integration with vault for credential rotation
        - name: VAULT_ADDR
          value: "https://vault.malu-system.svc.cluster.local:8200"
        - name: VAULT_AUTH_PATH
          value: "kubernetes"
        - name: VAULT_ROLE
          value: "secret-storage-service"
        - name: SECRETS_AUTO_ROTATION
          value: "true"
        - name: SECRETS_ROTATION_INTERVAL
          value: "24h"
        # Enhanced TLS settings
        - name: TLS_ENABLED
          value: "true"
        - name: TLS_MIN_VERSION
          value: "TLS1.3"
        - name: TLS_CERT_PATH
          value: "/certs/tls.crt"
        - name: TLS_KEY_PATH
          value: "/certs/tls.key"
        # Telemetry settings
        - name: OTEL_SERVICE_NAME
          value: "secret-storage-service"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://signoz-otel-collector.observability.svc.cluster.local:4317"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=secret-storage-service,service.namespace=malu,service.version=${IMAGE_TAG}"
        # Audit logging enabled
        - name: AUDIT_LOGGING_ENABLED
          value: "true"
        - name: AUDIT_LOG_LEVEL
          value: "INFO"
        
        volumeMounts:
        - name: api-tokens
          mountPath: "/var/run/secrets/tokens"
          readOnly: true
        - name: temporary-storage
          mountPath: "/app/data"
        - name: redis-credentials
          mountPath: "/var/run/secrets/redis"
          readOnly: true
        - name: service-certs
          mountPath: "/certs"
          readOnly: true
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Only capability needed for binding to ports
          seccompProfile:
            type: RuntimeDefault
          privileged: false
          procMount: Default
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        supplementalGroups: [1000]
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - secret-storage-service
              topologyKey: "kubernetes.io/hostname"
